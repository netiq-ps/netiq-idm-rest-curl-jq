openapi: 3.0.0
info:
  version: 1.7.1
  title: eDirectory REST
  description: |
    This document provides the list of all endpoints and their JSON request/response details of eDirectory REST API. eDirectory REST API (eDirAPI) is JSON format based ldap access application programming Interface(API) that uses HTTP(s) requests to perform ldap operations. REST is architectural style for distributed hypermedia systems. Using these APIs, web application can provide customized secure access to ldap directory. Users can view and manipulate users, groups, objects.
  
    For connecting with eDirAPI in headless mode, make sure you have http redirects based on location header enabled.
    For using REST endpoints in OSP mode, the following endpoints must be called beforehand in given order:-

    1. Make a HTTP GET Request to the URL: “https://{identityconsole_ip}/identityconsole/#/”
    This will return two cookies namely "x-oidp-session" and "x-oidp-oauth2". This will also redirect you to the OSP server URL by setting "Location" header in response from which you can get the OSP server ip or domain name which can be reused in the next POST request URL. Also make sure you capture the "Location" header value as it is set as the value for "Referrer" header in the next request.
    This will provide a 302 response and redirect it OSP URL.  Capture the Location from the response Header, this will be considered as a “Referer” for the next request. Refer the below example:

    Ex:- 
    
        Request Type: GET https://164.99.179.215:9000/identityconsole/#/

        Response Code: 302

        Location: https://164.99.179.230:8543/osp/a/idm/auth/oauth2/grant?redirect_uri=https://164.99.179.215:9000/eDirAPI/v1/treeidm/authcoderedirect&client_id=identityconsole&response_type=code&state=sQqUuuh6Kb5oYdskmtV1Wzt5

        Note: In this example IDConsole is configured on 164.99.179.215 and it is configured with OSP at 164.99.179.230.

    2. Make a HTTP POST Request to the URL: https://{osp_ip}/osp/a/idm/auth/app/login?acAuthCardId=np-contract-$default-card$&sid=0 with form data of type x-www-form-encoded:-
    Headers:- 
    
              Referer= Location capture from 1st step
              Content-Type: application/x-www-form-encoded

    Body:-    
              
              cexid: np-auth
              ccancelid: false
              option: credential
              excludeParameterNames: g-recaptcha-response, h-captcha-response, recaptcha_response_field, recaptcha_challenge_field, option, sid, Ecom_User_ID, Ecom_Password, Ecom_Token
              FilterAuthenticationClass.dup-res-state: 0
              Ecom_User_ID: DN
              Ecom_Password: password

    Response Code: 303

    Note: - 
        •	Make sure you capture the RSESSIONID cookie which is returned as response to this request and set this cookie for further requests.
        •	Some tools may require multiple redirections to achieve the RSESSIONID. User must capture the Location details from each RequestHeader and send a GET request with the Location URL.

    GET Request: https://164.99.179.230:8543/osp/a/idm/auth/oauth2/authcodecontinue?sid=0&privateId=8454f385bebdaf3d1035&client_id=identityconsole&irdpkg=1689585464456-ycVAgSSCEe6T6AAMKY2R3A

    Headers:
        Referer: https://164.99.179.230:8543/osp/a/idm/auth/oauth2/grant?redirect_uri=https://164.99.179.215:9000/eDirAPI/v1/ospt/authcoderedirect&client_id=identityconsole&response_type=code&state=0Kxl3qF3z0O5TtgCXM9qd-Ev
    
    The request header must include ‘Referer’, captured as part of step1 for all such request.
    
    3. Get the anti CSRF Token (refer to GET /getanticsrftoken call in AntiCsrfToken section). The token returned in the response should be included as X-CSRF-Token header value in further calls to eDirAPI.
    GET request to https://{HostName}:{PortName}/eDirAPI/v1/{TreeName}/getanticsrftoken

    4. For further requests, make sure to set the X-CSRF-Token header with the value you were given when you made the /getanticsrftoken GET request.
    Ex:-
    GET request to https://{HostName}:{PortName)/eDirAPI/v1/{TreeName)/rbs/GetUserAssociatedTasks
    Headers:- 
              
              X-CSRF-Token: pU8TxA25D2vIet4Be5qyM4cK
              Cookie: RSESSIONID=MPLcFGmSIQEP5IQbrsKIEkT5lX4Vbuyvv-iEXI1OsXw=
  license:
    name: Commercial
servers:
  - url: 'https://{server_address}:{port}/{identifier}/{version}/{tenant}'
    description: Base URL where the REST API will be hosted
    variables:
      version:
        default: v1
      tenant:
        default: treename
      identifier:
        default: eDirAPI
paths:
  /:
    get:
      summary: List all the endpoints. Note that the url should be until port number. e.g.,https://10.10.10.10:9000/
      tags:
        - Initialize
      operationId: initialize
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        '200':
          description: List of all endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointsList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schema/syntaxes:
    get:
      summary: List all Syntaxes
      tags:
        - Syntaxes
      operationId: listSyntaxes
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
      responses:
        '200':
          description: List of all syntaxes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Syntaxlist'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/schema/syntaxes/{id}':
    get:
      summary: 'List syntax referred by {id}'
      tags:
        - Syntaxes
      operationId: getSyntax
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - name: id
          in: path
          required: true
          description: The id of the syntax
          schema:
            type: string
          example: 1361411466115121200
      responses:
        '200':
          description: Syntax definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Syntax'
        '404':
          description: Syntax ID not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schema/attributes:
    get:
      summary: List all attributes
      tags:
        - Attributes
      operationId: listAttributes
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
      responses:
        '200':
          description: List of all attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create an attribute definition
      tags:
        - Attributes
      operationId: postAttribute
      requestBody:
        description: The attribute definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributePost'
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        '201':
          description: Attribute created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict - resource already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'            
  '/schema/attributes/{name}':
    get:
      summary: 'Get attribute definition defined by {name}'
      tags:
        - Attributes
      operationId: getAttribute
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - name: name
          in: path
          required: true
          description: The name of the attribute
          schema:
            type: string
      responses:
        '200':
          description: Attribute definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        '404':
          description: Attribute not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete an attribute definition
      tags:
        - Attributes
      operationId: delAttribute
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: name
          in: path
          required: true
          description: The name of the attribute
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Deletion success
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /schema/objectClasses:
    get:
      summary: List all objectClasses
      tags:
        - ObjectClasses
      operationId: listObjectClass
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
      responses:
        '200':
          description: List of all ObjectClasses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectClassList'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create an objectClass definition
      tags:
        - ObjectClasses
      operationId: postObjectClass
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      requestBody:
        description: The attribute definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectClassPost'
      security:
        - cookieAuth: []
      responses:
        '201':
          description: ObjectClass created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict - resource already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update the objectClass definition
      tags:
        - ObjectClasses
      operationId: putObjectClass
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      requestBody:
        description: The attribute definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectClassPost'
      security:
        - cookieAuth: []
      responses:
        '201':
          description: ObjectClass updated
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict - resource already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/schema/objectClasses/{name}':
    get:
      summary: 'Get an ObjectClass definition specified by {name}'
      tags:
        - ObjectClasses
      operationId: getObjectClass
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - name: name
          in: path
          required: true
          description: The name of the objectClass
          schema:
            type: string
      responses:
        '200':
          description: ObjectClass definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectClass'
        '404':
          description: ObjectClass not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an ObjectClass definition
      tags:
        - ObjectClasses
      operationId: delObjectClass
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token.
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: name
          in: path
          required: true
          description: The name of the ObjectClass
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Deletion success
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session:
    get:
      summary: Find if session is valid. Please note that url should not include treename, e.g., https://10.10.10.10:8000/eDirAPI/v1/session
      tags:
        - Session
      operationId: validateSession
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
      responses:
        '200':
          description: Session definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    post:
      summary: Create a session - Login. Please note that url should not include treename, e.g., https://10.10.10.10:8000/eDirAPI/v1/session
      tags:
        - Session
      operationId: createSession
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      requestBody:
        description: Data required for a session
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionPost'
      security: []
      responses:
        '201':
          description: Session created
          headers:
            Set-Cookie:
              description: >-
                Session cookie set. This should be returned in X-RSESSION
                header.
              schema:
                type: string
                example: RSESSIONID=B9344BA; Path=/; HttpOnly; Secure
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a session - Logout. Please note that url should not include treename, e.g., https://10.10.10.10:8000/eDirAPI/v1/session
      tags:
        - Session
      operationId: deleteSession
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        '204':
          description: Deletion success
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/getanticsrftoken':
    get:
      summary : Generate the aticsrftoken and provide the Generated token in the header name "X-CSRF-Token" for the next requests. Call this endpoint once just after session creation.
      tags:
        - AntiCsrfToken
      operationId: getanicsrftoken
      security:
        - cookieAuth: []
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: antiCSRF token success
          content:
            string:
              example: HuyS8gAPgtfzE4KhUXzNHJzB
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'      
  '/{base DN}/search':
    post:
      summary: Create a search request. Note that in case of tree root as the base, just use '/search' without any extra empty '/' characters in the url. Ex:- 'https://10.71.36.58:9000/eDirAPI/v1/{treename}/search' for root search, 'https://10.71.36.58:9000/eDirAPI/v1/{treename}/{dn}/search' for base dn search.
      tags:
        - Search
      operationId: createSearch
      requestBody:
        description: Parameters of the search request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedSearchRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: base DN
          in: path
          required: true
          description: The resource DN of the base entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultSet'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/{base DN}/vlvSearch':
    post:
      summary: Create a vlv search request. Note that in case of tree root as the base, /vlvSearch should be used.
      tags:
        - Search
      operationId: createVLVSearch
      requestBody:
        description: Parameters of the search request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: base DN
          in: path
          required: true
          description: The resource DN of the base entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultSet'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
 
  '/{resource DN}/':
    get:
      summary: List children of objects under resource DN
      tags:
        - Resource Management
      operationId: listEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Entry read success
          content:
            application/json:
              schema:
                type: array
                items:
                  description: list of resource DN of children
                  type: string
                example:
                  - /eDirAPI%2Fv1%2FDEMOTREE%2Fo=alice%2Fl=bob
                  - /eDirAPI%2Fv1%2FDEMOTREE%2Fo=alice%2Fcn=sam
        '404':
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{container DN}':
    post:
      summary: Create an entry
      tags:
        - Resource Management
      operationId: postEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: container DN
          in: path
          required: true
          description: The container DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=alice%2Fcn=bob
      requestBody:
        description: The Entry data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryPost'
      security:
        - cookieAuth: []
      responses:
        '201':
          description: Entry created
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Conflict - resource already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{resource DN}':
    get:
      summary: 'Get an object referred to by resource DN'
      tags:
        - Resource Management
      operationId: readEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Entry definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
        '404':
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an entry
      tags:
        - Resource Management
      operationId: deleteEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token.
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Deletion success
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Modify an entry
      tags:
        - Resource Management
      operationId: patchEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      requestBody:
        description: The entry modification data in JSON Patch format
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patch'
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Modification success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/move':
    post:
      summary: 'Moves, renames and/or copies an entry'
      tags:
        - Resource Management
      operationId: moveEntry
      requestBody:
        description: 'The entry move, rename and/or copy data in JSON format'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveItem'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      security:
        - cookieAuth: []
      responses:
        '204':
          description: Operation success
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveResponse'
  '/{resource DN}/compare':
    post:
      summary: 'Compares the value(s) of given attribute of a dn'
      tags:
        - Resource Management
      operationId: compareEntry
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob
      requestBody:
        description: 'The entry attribute and values to be compared in JSON format'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Compare'
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Comparison done
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{resource DN}/privileges':
    post:
      summary: Get the privileges list of trustee DN for the resource DN for a given set of attributes
      tags:
        - Resource Management
      operationId: getPrivList
      requestBody:
        description: Trustee DN and a list of attributes of the trustee DN for which the rights are asked
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPrivListRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob   
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of attributes and corresponding privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrivListResultSet'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Attribute not found  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{partition DN}/splitPartition':
    post:
      summary: Split the Partitons rooted at DN from  parent partition
      tags:
        - Partition And Replica      
      operationId: splitPartions
      requestBody:
        description: Split the  partitions 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SplitRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell    
      responses:
        '200':
          description: Split Partition  created  successfully 
        '400':
          description:  Container not found 
        '401':
          description: Unauthorized - access control prevents entry deletion          
        '409':
          description: "NDS error:partition already exists (-679)"      
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
  '/{partition DN}/mergePartitions':
    post:
      summary: Merge the Partitons rooted at DN with parent partition
      tags:
        - Partition And Replica       
      operationId: mergePartions
      requestBody:
        description: Merge the splited partitions 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell    
      responses:
        '200':
          description: Merge Partition  created  successfully 
        '400':
          description: Container not found
        '401':
          description: Unauthorized - access control prevents entry deletion          
        '404':
          description: "NDS error :no such value (-602)"        
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/{partition DN}/addReplica':
    post:
      summary: Add Replica 
      tags:
        - Partition And Replica       
      operationId: addReplica
      requestBody:
        description: add a new Replica 
         - Replica type are
          a) MASTER 
          b) READ_WRITE
          c) READ_ONLY
          d) SPARSE_WRITE
          e) SPARSE_READ        
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addReplicaRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell 
      responses:
        '200':
          description: A new Replica added  Successfully
        '400':
          description: "NDS error: replica already exists (-624)"
        '401':
          description: Token Not Found 
        '404':
          description: "NDS error: no such entry (-601)"  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/{partition DN}/changeReplica':
    post:
      summary: Change the type of Replica to the new type specifies by replica type
      tags:
        - Partition And Replica       
      operationId: changeReplica
      requestBody:
        description: Change the Replica type             
         - Replica type are
          a) MASTER 
          b) READ_WRITE
          c) READ_ONLY
          d) SPARSE_WRITE
          e) SPARSE_READ
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changeReplicaRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell 
      responses:
        '200':
          description: Replica Type changed  Successfully
        '400':
          description:  "NDS error : no such entry (-601)"
        '401':
          description: Invalid credentials 
        '404':
          description: Could not decode LDAP Extension packet  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/{partition DN}/removeReplica':
    post:
      summary: Remove the present  Replica 
      tags:
        - Partition And Replica       
      operationId: RemoveReplica
      requestBody:
        description:  Remove the Replica 
         - Replica type are
          a) MASTER 
          b) READ_WRITE
          c) READ_ONLY
          d) SPARSE_WRITE
          e) SPARSE_READ
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeReplicaRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell 
      responses:
        '200':
          description: Replica removed  Successfully
        '400':
          description:  "NDS error:no such entry (-601)"
        '401':
          description:  Token Not Found  
        '404':
          description: Could not decode LDAP Extension packet  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/{partition DN}/getReplicaInfo':
    post:
      summary: Get the  Replica Information
      tags:
        - Partition And Replica       
      operationId: getReplicaInfo
      requestBody:
        description: Get Replica Information 
         - Replica type are
          a) MASTER 
          b) READ_WRITE
          c) READ_ONLY
          d) SPARSE_WRITE
          e) SPARSE_READ
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getReplicaInfoRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: partition DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell 
      responses:
        '200':
          description: Give the Replica info in that server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReplicaInfoResponse'
        '400':
          description:  Container not found
        '401':
          description: Invalid credentials 
        '404':
          description: "NDS error: no such entry (-601)"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/{server DN}/listReplica':
    get:
      summary: List Of Replica that reside on specific server
      tags:
        - Partition And Replica       
      operationId: listReplica
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: server DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell/cn=server2   
      responses:
        '200':
          description: list the Replica present in that server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listofReplicaResponse'
        '400':
          description:  NDS error=no such value (-602)
        '401':
          description: Invalid credentials (49)
        '404':
          description: Could not decode LDAP Extension packet  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{server DN}/setReplicaFilter':
    post:
      summary: Set the Filter on the server
      tags:
      - Partition And Replica
      operationId: setReplicaFilter
      requestBody:
        description: set the filters to server Replica  
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setReplicaFilterRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: server DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: cn=server2,o=novell    
      responses:
        '200':
          description: Set Replica filter   created  successfully 
        '400':
          description: Container not found
        '401':
          description: Unauthorized - access control prevents entry deletion          
        '404':
          description: "NDS error :no such value (-602)"        
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  '/{server DN}/getReplicaFilter':
    get:
      summary : get the filter Replica details on that server 
      tags:
      - Partition And Replica
      operationId: getReplicaFilter
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port      
        - name: server DN
          in: path
          required: true
          description: The resource DN of the entry of the search base - note that * denotes more items
          schema:
            type: string
            example: o=novell/cn=server2   
      responses:
        '200':
          description: list the Replica present in that server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReplicaFilterResponse'
        '400':
          description:  NDS error=no such value (-602)
        '401':
          description: Invalid credentials (49)
        '404':
          description: Could not decode LDAP Extension packet  
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/{resource DN}/passwordModify':
    post:
      summary: LDAP Password Modify Extended Operation
      tags:
        - Resource Management
      operationId: PasswordModifyExtended
      requestBody:
        description: oldpassword and newPassword will be present in the request body and UserIdentity will be passed in the URL as resource DN. oldpassword and newPassword will be in base64 encoded format
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordModifyRequest'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: resource DN
          in: path
          required: true
          description: The resource DN of the entry
          schema:
            type: string
            example: o=alice%2Fcn=bob    
      security:
        - cookieAuth: []
      responses:
        '200':
          description: password modify success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordModifyResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Attribute not found
        '418':
          description: Unwilling To Perform, if the backend holding the target entry does not support the given operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordModifyUnwillingToPerform'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/{server DN}/triggerLimber':
    post:
      summary: Trigger Limber background process on the server DN
      tags:
        - Resource Management
      operationId: triggerLimber
      requestBody:
        description: Request body will be empty
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/triggerLimberPost'
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
        - name: server DN
          in: path
          required: true
          description: The server DN on which the Limber process is to be triggred
          schema:
            type: string
            example: o=alice%2Fcn=SLES11SP3server
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Limber process trigerred successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Server DN not found
        default:
          description: Unexpected error  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  "/pki/serverCertificates/createCertificate":
    post:
      summary: Create the Server Certificate
      tags:
        - Certificate Management
      operationId: createServerCertificate
      requestBody:
        description: parameters for Create  server certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServerRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Certificate Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/importCertificate":
    post:
      summary: Create the Server Certificate with import method
      tags:
        - Certificate Management
      operationId: importServerCertificate
      requestBody:
        description: parameters for Create server certificate with import method
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportServerRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Certificate Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/backupCertificate":
    post:
      summary: Backup the server certificate
      tags:
        - Certificate Management
      operationId: backupServerCertificate
      requestBody:
        description: parameters for Backup server Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupServerRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate backup successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/exportCertificate":
    post:
      summary: Export the server certificate
      tags:
        - Certificate Management
      operationId: exportServerCertificate
      requestBody:
        description: parameters for Export server Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate export successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/decodeCSR":
    post:
      summary: Decode the Certificate
      tags:
        - Certificate Management
      operationId: decodeCSR
      requestBody:
        description: parameters for decode certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Decode"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Decoding the certificate successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecodeResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/getCertificates":
    post:
      summary: Get the server certificate
      tags:
        - Certificate Management
      operationId: getServerCertificate
      requestBody:
        description: parameters for Get server certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Server Certificate Retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/getChain":
    post:
      summary: Get the chain certificate
      tags:
        - Certificate Management
      operationId: getChainCertificate
      requestBody:
        description: parameters for Certificate Hierarchy
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: chain Certificate Retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chain"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/getCSR":
    post:
      summary: Get the CSR(Certificate Signing Request)
      tags:
        - Certificate Management
      operationId: getCSR
      requestBody:
        description: parameters for Get CSR
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCSRRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CSR retrieved successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Decode"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/replaceCertificate":
    post:
      summary: Replace the server certificate
      tags:
        - Certificate Management
      operationId: replaceCertificate
      requestBody:
        description: parameters for Replace server certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate replaced successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/revokeCertificate":
    post:
      summary: Revoke the server certificate
      tags:
        - Certificate Management
      operationId: revokeCertificate
      requestBody:
        description: parameters for Revoke server certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeServerRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate revoked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/validateCertificate":
    post:
      summary: Validate the server certificate
      tags:
        - Certificate Management
      operationId: validateCertificate
      requestBody:
        description: parameters for Validate Server Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate validate successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/serverCertificates/issueCertificate":
    post:
      summary: Issue the certificate using CSR
      tags:
        - Certificate Management
      operationId: issueCertificate
      requestBody:
        description: parameters for Issue Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate Issued successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/createCertificate":
    post:
      summary: Create the user Certificate
      tags:
        - Certificate Management
      operationId: createUserCertificate
      requestBody:
        description: parameters for Create user certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Certificate Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/backupCertificate":
    post:
      summary: Backup the user certificate
      tags:
        - Certificate Management
      operationId: backupUserCertificate
      requestBody:
        description: parameters for Backup user Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate backup successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackupResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/exportCertificate":
    post:
      summary: Export the user certificate
      tags:
        - Certificate Management
      operationId: exportUserCertificate
      requestBody:
        description: parameters for Export user Certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate export successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/getCertificates":
    post:
      summary: Get the user certificate
      tags:
        - Certificate Management
      operationId: getUserCertificate
      requestBody:
        description: parameters for Get user certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: User Certificate Retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/importCertificate":
    post:
      summary: Create the User Certificate with import method
      tags:
        - Certificate Management
      operationId: importUserCertificate
      requestBody:
        description: parameters for Create user certificate with import method
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Certificate Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/revokeCertificate":
    post:
      summary: Revoke the user certificate
      tags:
        - Certificate Management
      operationId: revokeUserCertificate
      requestBody:
        description: parameters for Revoke user certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate revoked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/userCertificates/validateCertificate":
    post:
      summary: Validate the user certificate
      tags:
        - Certificate Management
      operationId: validateUserCertificate
      requestBody:
        description: parameters for validate user certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportUserRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate validate successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/trustedRootCertificates/getCertificates":
    post:
      summary: Get the trustedRoot certificate
      tags:
        - Certificate Management
      operationId: getTrustedRootCertificate
      requestBody:
        description: parameters for Get TrustedRoot certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTrustedRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate Retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTrustedResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/trustedRootCertificates/validateCertificate":
    post:
      summary: Get the trustedRoot certificate
      tags:
        - Certificate Management
      operationId: validateTrustedRootCertificate
      requestBody:
        description: parameters for validate TrustedRoot certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateTrustedRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate validated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/backupCertificate":
    post:
      summary: Backup an existing CA certificate into a PKCS12 file
      tags:
        - Certificate Management
      operationId: backupCACertificate
      requestBody:
        description: parameters  backupcertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BackupCARequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate backup successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResponse"

        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/createCertificateAuthority":
    post:
      summary: Create Certificate Authority
      tags:
        - Certificate Management
      operationId: createCertificateAuthority
      requestBody:
        description: parameters for createCertificateAuthority
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCARequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Certificate Authority Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/createCRL":
    post:
      summary: Create CRL
      tags:
        - Certificate Management
      operationId: createCRL
      requestBody:
        description: parameters for createCRL
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCRLRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: CRL Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/getCertificates":
    post:
      summary: Get the certificates  of the CA
      tags:
        - Certificate Management
      operationId: getCACertificates
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CA Certificate retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCACertificate"

        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/getChain":
    post:
      summary: Get the certificate chain of CA
      tags:
        - Certificate Management
      operationId: getChainCertificateCA
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: chain Certificate Retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCACertificate"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/getCAConfiguration":
    post:
      summary: Get CA Configuration settings
      tags:
        - Certificate Management
      operationId: getCAConfiguration
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CA Configuration  settings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CAConfiguration"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/getCRLs":
    post:
      summary: Get CRLs
      tags:
        - Certificate Management
      operationId: getCRLs
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CRLs retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCRLs"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/importCertificate":
    post:
      summary: Restore CA Certificate by importing PKCS12 file
      tags:
        - Certificate Management
      operationId: importCACertificate
      requestBody:
        description: parameters for importCertificate.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportCARequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: CA Certificate Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/issueCRL":
    post:
      summary: Issue CRL
      tags:
        - Certificate Management
      operationId: issueCRL
      requestBody:
        description: parameters for issueCRL
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueCRL"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CRL issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/revokeCertificate":
    post:
      summary: Revoke Certificate
      tags:
        - Certificate Management
      operationId: revokeCACertificate
      requestBody:
        description: parameters for revokeCertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeCARequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate Revoked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/updateCAConfiguration":
    post:
      summary: Update CA Configuration settings
      tags:
        - Certificate Management
      operationId: updateCAConfiguration
      requestBody:
        description: parameters for updateCAConfiguration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CAConfiguration"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CA Configuration  settings updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/validateCertificate":
    post:
      summary: Validate the certificate
      tags:
        - Certificate Management
      operationId: validateCACertificate
      requestBody:
        description: Types of certificate are
          a) self-signed RSA
          b) self-signed EC
          c) root
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateCARequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: Certificate validate successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/certificateAuthority/updateCRL":
    post:
      summary: Update CRL
      tags:
        - Certificate Management
      operationId: updateCRL
      requestBody:
        description: parameters for updateCRL
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCRLRequest"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: CRL Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/pki/createSASServiceObject":
    post:
      summary: Create the SAS Service Object
      tags:
        - Certificate Management
      operationId: createSASServiceObject
      requestBody:
        description: parameters for createSASServiceObject
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SASObject"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "201":
          description: Object created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/eba/getNCPCertificates":
    post:
      summary: Get the NCP Certificates
      tags:
        - Enhanced Background Authentication
      operationId: getNCPCertificates
      requestBody:
        description: parameters for getNCPCertificates
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerIP"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: NCP certificate retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNCPCertificateResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/eba/revokeNCPCertificate":
    post:
      summary: Revoke the NCP Certificates
      tags:
        - Enhanced Background Authentication
      operationId: revokeNCPCertificate
      requestBody:
        description: parameters for revokeNCPCertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeNCPCertificate"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: certificate revocation successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/eba/getUAPCACertificate":
    post:
      summary: Get the UAP Certificates
      tags:
        - Enhanced Background Authentication
      operationId: getUAPCACertificate
      requestBody:
        description: parameters for getUAPCACertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerIP"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: certificate retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUAPCAResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/eba/getUAPCSRCertificate":
    post:
      summary: Get the UAP CSR Certificates
      tags:
        - Enhanced Background Authentication
      operationId: getUAPCSRCertificate
      requestBody:
        description: parameters for getUAPCSRCertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServerIP"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: certificate retrieved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUAPCSRResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/eba/approveUAPCSRCertificate":
    post:
      summary: Approve the UAP CSR Certificates
      tags:
        - Enhanced Background Authentication
      operationId: approveUAPCSRCertificate
      requestBody:
        description: parameters for approveUAPCSRCertificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApproveUAPCSRCertificate"
      parameters:
        - in: header
          name: Content-Type
          required: true
          description: The media type of the resource
          schema:
            type: string
            example: application/json
        - in: header
          name: X-CSRF-Token
          required: true
          description: The anti-CSRF token
          schema:
            type: string
            example: HuyS8gAPgtfzE4KhUXzNHJzB
        - in: header
          name: Origin
          required: true
          description: The Origin header for anti-CSRF
          schema:
            type: string
            example: https://hostname:port
      responses:
        "200":
          description: certificate Approved successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Entry not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: RSESSIONID
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Standard LDAP error code from RFC4511
        message:
          type: string
          description: Standard LDAP error message from RFC4511
    Syntax:
      type: object
      properties:
        id:
          type: string
          description: Concatenated OID string - used for uniquely identifying the syntax
          example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F2168401113719115000
        oid:
          type: string
          description: LDAP OID of the syntax
          example: 2.16.840.1.113719.1.1.5.1.17
        desc:
          type: string
          description: Description of the Syntax, if received from backend
          example: Access Control List
        extensions:
          type: object
          description: Extensions received from the backend
          example:
            X-NDS_SYNTAX: '17'
        jsonSchema:
          type: object
          description: JSON Schema of the syntax
          example:
            id: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F2168401113719115000
            type: object
            description: ACL
            $schema: 'https://json-schema.org/draft-06/schema#'
            properties:
              data:
                type: string
                example: base64
    Syntaxlist:
      type: array
      items:
        $ref: '#/components/schemas/Syntax'
    AttributeList:
      type: array
      items:
        $ref: '#/components/schemas/Attribute'
    Attribute:
      type: object
      properties:
        name:
          type: array
          description: Array of names
          items:
            type: string
        oid:
          type: string
          description: LDAP OID of the attribute
        desc:
          type: string
          description: Description of the attribute, if received from the backend
        equality:
          type: string
          description: Reference to the definition for equality
        ordering:
          type: string
          description: Reference to the definition for ordering
        substring:
          type: string
          description: Reference to the definition for substring
        syntax:
          type: string
          description: Reference to syntax defintion
        lowerlimit:
          type: integer
          format: int32
          description: Lower limit if defined
        upperlimit:
          type: integer
          format: int32
          description: Upper limit if defined
        flags:
          type: array
          items:
            type: string
            description: flag is used for restricting the attribute usage in objectClasses
            enum:
              - single-value
              - no-user-modification
              - collective
        usage:
          type: string
          description:  It indicates how the attribute type is to be used.
          enum:
            - userApplications
            - directoryOperation
            - distributedOperation
            - dSAOperation
        extensions:
          type: object
          description: Extensions received from the backend
      example:
        name:
          - /eDirAPI%2Fv1%2Fjtree_name%2Fschema%2Fattributes%2FuserPassword
        oid: 2.5.4.35
        desc: Internal NDS policy forces this to be single-valued
        syntax: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F1361411466115121140
        upperlimit: 128
        usage: directoryOperation
        
    EndpointsList:
      type: array
      description: Array of endpoints
      items:
        type: string
      example:
        - "/eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes"
        - "/eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes"
        - "/eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses"
        - "/eDirAPI%2Fv1%2Ftree_name%2F"
        - "/eDirAPI%2Fv1%2Ftree_name%2Fsession"
        - "/eDirAPI%2Fv1%2Ftree_name%2Fospconfig"
        - "/eDirAPI%2Fv1%2Ftree_name%2Fgetanticsrftoken"
        
    AttributePost:
      type: object
      properties:
        name:
          type: array
          description: Array of names
          items:
            type: string
        oid:
          type: string
          description: LDAP OID of the attribute
        desc:
          type: string
          description: 'Description of the attribute, if received from the backend'
        equality:
          type: string
          description: Reference to the definition for equality
        ordering:
          type: string
          description: Reference to the definition for ordering
        substring:
          type: string
          description: Reference to the definition for substring
        syntax:
          type: string
          description: Reference to syntax defintion
        lowerlimit:
          type: integer
          format: int32
          description: Lower limit if defined
        upperlimit:
          type: integer
          format: int32
          description: Upper limit if defined
        flags:
          type: array
          description: flag is used for restricting the attribute usage in objectClasses.
          items:
            type: string
            enum:
              - single-value
              - no-user-modification
              - collective
        usage:
          type: string
          description:  It indicates how the attribute type is to be used.
          enum:
            - userApplications
            - directoryOperation
            - distributedOperation
            - dSAOperation
        extensions:
          type: object
          description: Extensions received from the backend
      required:
        - name
        - oid
        - syntax
      example:
        name:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FuserPassword
        oid: 2.5.4.35
        desc: Internal NDS policy forces this to be single-valued
        syntax: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fsyntaxes%2F1361411466115121140
        upperlimit: 128
        usage: directoryOperation
        extensions:
         X-NDS_FILTERED_REQUIRED: '1'
         X-NDS_NONREMOVABLE: ''
    ObjectClass:
      type: object
      description: Object Class data model
      properties:
        name:
          type: string
          description: Name of the objectClass
        oid:
          type: string
          description: LDAP OID of the objectClass
        desc:
          type: string
          description: Description of the objectClass if received
        obselete:
          type: boolean
          description: Is objectClass active
        sup:
          type: array
          description: Array of links to objectClass definitions of super classes
          items:
            type: string
        kind:
          type: string
          description: Represents the kind of objectClass. Value of kind must be one of the below enum values
          enum:
            - ABSTRACT
            - STRUCTURAL
            - AUXILIARY
        must:
          type: array
          description: Array of attribute which must be present.
          items:
            type: string
        may:
          type: array
          description: Array of attribute which may be present.
          items:
            type: string
        extensions:
          type: object
          description: Extensions received from the backend
      example:
        name: 
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FnsimChallengeSet
        oid: 2.16.840.1.113719.1.39.44.6.1
        sup:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FTop
        kind: STRUCTURAL
        must:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn
        may:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fdescription
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimRequiredQuestions
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimRandomQuestions
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimNumberRandomQuestions
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimMinResponseLength
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FnsimMaxResponseLength
        extensions:
          X-NDS_NAMING: 
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn
          X-NDS_CONTAINMENT:
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FnspmPasswordPolicyContainer
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FCountry
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2Fdomain
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FLocality
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FOrganization
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2ForganizationalUnit
          X-NDS_NOT_CONTAINER: ''
          X-NDS_NAME:
            - Organizational Unit
          X-NDS_NONREMOVABLE: '1'
          X-NDS_ACL_TEMPLATES: 
            privileges:
              compare: false
              read: true
              write: false
              self: false
              supervisor: false
              inheritACL: false
            scope: 'subtree'
            trusteeDN: '/eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob'
            attribute: '[All Attributes Rights]'
          X-NDS_SPARSE_OPERATIONAL: ''
          X-NDS_SPARSE_REQUIRED: ''
    ObjectClassPost:
      type: object
      description: Object Class data model
      properties:
        name:
          type: string
          description: Name of the objectClass
        oid:
          type: string
          description: LDAP OID of the objectClass
        desc:
          type: string
          description: Description of the objectClass if received
        obselete:
          type: boolean
          description: Is objectClass active
        sup:
          type: array
          description: Array of links to objectClass definitions of super classes
          items:
            type: string
        kind:
          type: string
          description: Represents the kind of objectClass. Value of kind must be one of the below enum values
          enum:
            - ABSTRACT
            - STRUCTURAL
            - AUXILIARY
        must:
          type: array
          description: Array of attribute which must be present
          items:
            type: string
        may:
          type: array
          description: Array of attribute which may be present
          items:
            type: string
        extensions:
          type: object
          description: Extensions received from the backend
      required:
        - name
        - oid
        - kind
      example:
        name: 
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2Falice
        oid: 2.16.840.1.113719.1.39.44.6.1
        sup:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2FTop
        kind: ABSTRACT
        must:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn
        may:
          - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fdescription
        extensions:
          X-NDS_NAMING: 
            - /eDirAPI%2Fv1%2Ftree_name%2Fschema%2Fattributes%2Fcn
    ObjectClassList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectClass'
    Entry:
      type: object
      description: JSON representation of a LDAP object
      properties:
        dn:
          type: string
          description: The DN as relative URI
          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob
        attributes:
          type: object
          description: >-
            Actual attributes of the object. This object will depend on the
            objectClass of the entry.
          properties:
            cn:
              type: array
              description: Array of CNs
              items:
               type: string
               example: bob
            sn:
              type: array
              description: Array of SNs
              items:
               type: string
               example: bob
            objectclass:
              type: array
              description: Array of objectclasses
              items:
               type: string
               example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FinetOrgPerson
    EntryPost:
      type: object
      description: JSON representation of a LDAP object
      properties:
        dn:
          type: string
          description: The DN as relative URI
          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob
        attributes:
          type: object
          description: >-
            Actual attributes of the object. This object will depend on the
            objectClass of the entry.
          properties:
            cn:
              type: array
              description: Array of CNs
              items:
               type: string
               example: bob
            sn:
              type: array
              description: Array of SNs
              items:
               type: string
               example: bob
            objectclass:
              type: array
              description: Array of objectclasses
              items:
               type: string
               example: /eDirAPI%2Fv1%2Ftree_name%2Fschema%2FobjectClasses%2FinetOrgPerson
          required:
            - cn
            - sn
            - objectclass
      required:
        - dn
        - attributes
    SessionPost:
      type: object
      description: JSON Representation of parameters of a session
      properties:
        dn:
          type: string
          description: The DN as a relative URI
          example: /eDirAPI%2Fv1%2Fo=alice%2Fcn=bob
        password:
          type: string
          description: The password as a string - this is not displayed back in a GET
        ldapserver:
          type: string
          description: ldapserver's IP/DNS Name (Note- Add port as well if default port(636) is not used)
          example: 10.10.10.10
        end_time:
          type: string
          description: The end_time as time format applicable for this session
          example: '2019-05-17T14:44:29.006584692+05:30'
      required:
        - dn
        - password
        - ldapserver
    InitializePost:
      type: object
      description: JSON Representation of parameters for initialization
      properties:
        ldapserver:
          type: string
          description: ldapserver IP/DNS Name
          example: 10.71.21.34
      required:
        - ldapserver
    Session:
      type: object
      description: JSON Representation of parameters of a session
      properties:
        dn:
          type: string
          description: The DN as a relative URI
          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob
        end_time:
          type: string
          description: The end_time as time format applicable for this session
          example: '2019-05-17T14:44:29.006584692+05:30'
        treeName:
          type: string
          description: Tree name
          example: 'tree1'
        
    Patch:
      type: array
      items:
        $ref: '#/components/schemas/PatchItem'
    PatchItem:
      type: object
      description: JSON Patch Item definition used for patch
      properties:
        op:
          type: string
          description: The operation name which is to be performed
          enum:
            - replace
            - add
            - delete
          example: delete
        path:
          type: string
          description: Attribute of the object
          example: cn
        value:
          type: array
          description: For single-valued attribute, "value" will be without array, and for multi-valued attribute, "value" will be in the form of array. "value" is mandatory for add and replace operations only.
          items:
           type: string
           example: alice
      required:
        - op
        - path
    MoveItem:
      type: array
      items: 
        $ref: '#/components/schemas/Move'
    Move:
      type: object
      description: 'JSON defintion used for rename, move and/or copy'
      properties:
        dn:
          type: string
          description: The DN, on which move is being performed
          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob
        newname:
          type: string
          description: The new name for final DN
          example: cn=sam
        deleteoldname:
          type: boolean
          description: >-
            Decides if old name should be deleted. Leaves old object if this
            object is moving under another parent
        newsuperior:
          type: string
          description: The DN of the new parent entry under which this object will move to
          example: '%2Fo=eve%2F'
      required:
        - dn
    MoveResponse:
      type: array
      items: 
        $ref: '#/components/schemas/Error'
    Compare:
      type: object
      description: 'JSON defintion used for compare value(s) of attribute'
      properties:
        attribute:
          type: string
          example: cn
          description: An existing attribute name of given dn
        values:
          type: array
          description: For single-valued attribute, "values" will be without array, and for multi-valued attribute, "values" will be in the form of array
          items:
            type: string
            example: bob
      required:
        - attribute
        - values
    
    PaginatedSearchRequest:
      type: object
      description: A search request in JSON format
      properties:
        scope:
          type: string
          description: The Scope of the search
          enum:
            - base
            - one
            - sub
        filter:
          type: string
          description: LDAP style filter
          example: >-
            (|(&(objectClass=inetOrgPerson)(groupMembership=cn=group,o=metropolis))(cn=u*))
        attributes:
          type: array
          description: List of attributes to be returned
          items:
            type: string
          example:
            - cn
            - sn
            - meta.structuralObjectClass
        page_size:
          type: integer
          description: Number of items per page
          example: 10
  
    SearchRequest:
      type: object
      description: A search request in JSON format
      properties:
        scope:
          type: string
          description: The Scope of the search
          enum:
            - base
            - one
            - sub
        filter:
          type: string
          description: LDAP style filter
          example: >-
            (|(&(objectClass=inetOrgPerson)(groupMembership=cn=group,o=metropolis))(cn=u*))
        attributes:
          type: array
          description: List of attributes to be returned
          items:
            type: string
          example:
            - cn
            - sn
            - meta.structuralObjectClass
        page_size:
          type: integer
          description: Number of items per page
          example: 10
        sort:
          type: object
          description: Sort options
          properties:
            order:
              type: string
              description: The sort order
              enum:
                - ascending
                - descending
            attributes:
              type: array
              items:
                type: string
              example:
                - sn
        disableCount:
         type: boolean
         description: Disable count is the flag to enable/disable the total_pages count in the search response
         example: false
    PagedResultSet:
      type: object
      description: A set of search results with pages
      properties:
        page:
          type: object
          description: Page properties
          properties:
            total_pages:
              type: integer
              description: Total number of pages requested. If disableCount=true, total_pages will be 0
              example: 100
            page_size:
              type: integer
              description: Number of items per page
              example: 10
            current:
              type: integer
              description: Current Page number
              example: 1
            previous:
              type: string
              description: Link to previous page
              example: ''
            next:
              type: string
              description: Link to next page
              example: /eDirAPI%2Fv1%2Ftree_name%2Fsearch%2FKbAiO-6l9PdDkfRF0Vr9QpQEA3T2kkuYy_hxP42WLXyNAZGSwkIk4sr8yuOmH7WGsUMjpryPnn3x2SkzP_mTkw==&current=2
        items:
          type: array
          description: List of items - could be object results in a search
          items:
            type: object
    GetPrivListRequest:
      type: object
      description: Get Privileges List request
      properties:
        trusteeDN:
          type: string
          description: The Distinguished Name of the Trustee
          example: /eDirAPI%2Fv1%2Ftree_name%2Fo=alice%2Fcn=bob
        attributes:
          type: array
          description: List of attributes of the target DN for which Privileges are required
          items:
            type: string
          example:
            - description
            - cn
            - '[Entry Rights]'
      required:
        - trusteeDN
        - attributes
    PasswordModifyRequest:
      type: object
      description: password modify extended request
      properties:
        oldpassword:
          type: string
          description: The oldpassword value, if present, will contain the user's current password in base64 encoded format.
          example: MTIzNDU=
        newpassword:
          type: string
          description: The newpassword value, will contain the desired password for this user in base64 encoded format
          example: NDU2Nzg=
    GetPrivListResultSet:
      type: array
      items:
        $ref: '#/components/schemas/GetPrivListResponse'      
          
    GetPrivListResponse:
      type: object
      description: Get Privileges List response
      properties:
        attribute:
          type: string
          description: The attribute name for which the privileges are returned
          example: description
        privileges:
          type: object
          description: The privileges list for the given attribute
          properties:
            compare:
              type: boolean
              description: Trustee has compare rights to the attribute.
              example: true
            read:
              type: boolean
              description: Trustee has read rights to the attribute.
              example: true  
            write:
              type: boolean
              description: Trustee has write rights to the attribute.
              example: true
            self:
              type: boolean
              description: Trustee can add or delete its name as a value of the attribute
              example: true
            supervisor:
              type: boolean
              description: Trustee has all rights to the object's attributes
              example: false
            inheritACL:
              type: boolean
              description: Trustee inherits the rights granted in the ACL
              example: false
    PasswordModifyResponse:
      type: object
      description: It will contain code, message as well as newpassword. If in request newpassword is absent, then only newpassword will be present in response
      properties:
        code:
          type: integer
          description: Result Code is the LDAP error code
          example: 0
        message:
          type: string
          description: success message
          example: Password changed successfully
        newpassword:
          type: string
          description: The newpassword value, will contain the desired password for this user in base64 encoded format
          example: NTQzMjE=

    triggerLimberPost:
      type: object
          
    PasswordModifyUnwillingToPerform:
      type: object
      description: The OpenLDAP server will return an unwilling to perform error if the backend holding the target entry does not support the given operation
      properties:
        code:
          type: integer
          description: Result Code is the LDAP error code
          example: 53
        message:
          type: string
          description: LDAP error message
          example: Unwilling To Perform
    SplitRequest:
      type: object
      description: Get Merge Partiiton request
      properties:
        flags:
          type: integer
          format: int64
          description: ensure the server is up or not 
          example: 1
          
    MergeRequest:
      type: object
      description: Get Merge Partiiton request
      properties:
        flags:
          type: integer
          format: int64
          description: ensure the server is up or not 
          example: 1

    addReplicaRequest:
      type: object
      description: Get the change Replica type body Request
      properties:
        flags:
          type: integer
          format: int64
          description: ensure the server is up or not 
          example: 1
        replicaType:
          type: string
          description: send the replica type as needed 
          example: READ_ONLY
        serverDN: 
          type: string
          description: Get the serveDn authentication
          example: cn=server2,o=novell 

    changeReplicaRequest:
      type: object
      description: Get the change Replica type body Request
      properties:
        flags:
          type: integer
          format: int64
          description: ensure the server is up or not 
          example: 1
        replicaType:
          type: string
          description: send the replica type as needed 
          example: READ_ONLY
        serverDN: 
          type: string
          description: Get the serveDn authentication
          example: cn=server2,o=novell 
    
    removeReplicaRequest:      
      type: object
      description: Get the change Replica type body Request
      properties:
        flags:
          type: integer
          format: int64
          description: ensure the server is up or not 
          example: 1
        serverDN: 
          type: string
          description: Get the serveDn authentication
          example: cn=server2,o=novell 

    getReplicaInfoRequest:      
      type: object
      description: Get the change Replica type body Request
      properties:
        serverDN: 
          type: string
          description: Get the serveDn authentication
          example: cn=server2,o=novell 
          
    listofReplicaResponse: 
      type: array 
      items: 
            type: string
      example:
        - o=novell
      description: give the list of replica present in that server
    
    getReplicaInfoResponse:    
      type: object
      description: give the list of replica present in that server
      properties :
        partitionID:
          type: integer
          format: int64
          example: 32810
        ReplicaState:
          type: integer
          format: int64
          example: 0
        ModificationTime:
          type: integer
          format: int64
          example: 1561563296
        PurgeTime:
          type: integer
          format: int64
          example: 1561563296          
        LocalPartitionID:
          type: integer
          format: int64
          example: 21
        PartitionDN:
          type: string
          example:  "o= novell"          
        ReplicaType:
          type: integer
          format: int64
          example: 2
        Flags:
          type: integer
          format: int64
          example: 0
    setReplicaFilterRequest:
      type: object
      description: Get Set Filter Replica request
      properties:
        ServerDn:
          type: string
          description: Get the serveDn authentication
          example: cn=server2,o=novell
        ClassFilters:
          type: array
          items:
            $ref: '#/components/schemas/setReplicaSequence'
    setReplicaSequence:
      type: object
      description : Set replica sequence of sequence
      properties:
        ClassName: 
          type: string
          example: inetorgperson
          
        Attributes: 
          type: array
          items: 
            type: string
            example : cn 
    
    getReplicaFilterResponse:
      type : object 
      description: Get the Replica filter Information 
      properties:   
        ClassName:
          type : array
          items:
            type: string 
            example: country
            
        Attributes:
          type: array 
          items:
            type : string 
            example:
              - ACL
              - backLink 
  
    GetRequest:
      type: object
      description: Certificate Request
      properties:
        serverDN:
          type: string
          format: string
          description: serverDN
          example: serverName.novell

    Parse:
      type: object
      description: JSON representation of a server certificate details
      properties:
        certificates:
          type: array
          description: Array of server certificates
          items:
            allOf:
              - $ref: "#/components/schemas/CertificateName"
              - $ref: "#/components/schemas/CertificateDetails"

    CertificateName:
      type: object
      properties:
        certificateName:
          type: string
          description: Nick name of the certificate
          example: cert

    CertificateDetails:
      type: object
      properties:
        certificateVersion:
          type: integer
          description: certificate version
          example: 3
        subjectDN:
          type: string
          description: The entity associated with the public key
          example: O=novell.CN=admin
        issuerName:
          type: string
          description: Issuer of the certificate
          example: OU=Organizational CA.O=ED913
        effectiveDate:
          type: integer
          description: starting date of validity
          example: 1610935020
        expiryDate:
          type: integer
          description: Ending date of validity
          example: 16174007020
        serialNumber:
          type: string
          description: serial number of the certificate
          example: 7EF2BD49A786AD53B1CBBC79F326F4AFFA3F7A5C
        signatureAlgorithm:
          type: string
          description: OID of signature Algorithm
          example: "{1 2 840 10045 4 3 2}"
        keySize:
          type: integer
          description: Size of the key in bits
          example: 381
        certificate:
          type: string
          description: Full certificate in b64 format
          example: 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
        extensions:
          type: array
          description: Array of extension object
          items:
            $ref: "#/components/schemas/ExtensionDetails"

    ExtensionDetails:
      type: object
      properties:
        DEREncodedValue:
          type: number
          format: Hex
          description: DER Encoded value of extension
          example: 301D0603551D250416301406082B0601050507030206082B06010505070304
        ExtensionOID:
          type: string
          description: OID of the extension
          example: "{2 5 29 31}"
        isCritical:
          type: boolean
          description: indicates if critical or not
          example: true
        ExtensionType:
          type: integer
          description: type indicating the number
          example: 16
        DistributionPoints:
          type: array
          description: CRL distribution points
          items:
            type: string
            example: CN=One.CN=One - Configuration.CN=CRL Container.CN=Security
        ExtendedKeyUsage:
          type: integer
          description: Extended key usage
          example: 2
        KeyUsage:
          type: integer
          description: Key Usage
          example: 40960
        IPAddress:
          type: array
          description: Ip address array
          items:
            type: string
            example: 192.168.0.1
        Email:
          type: array
          description: Email address array
          items:
            type: string
            example: test@gmail.com
        DNSNames:
          type: array
          description: DNS Names array
          items:
            type: string
            example: www.YourCompany.com
        URI:
          type: array
          description: URI array
          items:
            type: string
            example: http://www.YourCompany.com
        DirectoryNames:
          type: array
          description: Directory Names array
          items:
            type: string
            example: .O=YourCompany.C=US
        rootLabel:
          type: string
          description: Root label
          example: A058020102020200FF020100030D0080000000000000000000000003090080000000000000003018301002010002087FFFFFFFFFFFFFFF010100020406F0DF483018301002010002087FFFFFFFFFFFFFFF010100020406F0DF48
        registryLabel:
          type: string
          description: Registry label
          example: A158020102020200FF020100030D0040000000000000000000000003090040000000000000003018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D3018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D
        enterpriseLabel:
          type: string
          description: enterprise label
          example: A158020102020200FF020100030D0040000000000000000000000003090040000000000000003018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D3018301002010002087FFFFFFFFFFFFFFF010100020411FFB09D
        certificateClass:
          type: integer
          description: certificate class
          example: 23
        URIReference:
          type: string
          description: URI Reference
          example: http://developer.novell.com/repository/attributes/certattrs_v10.ht
        version:
          type: string
          description: version
          example: 1.0
        cryptographicModule:
          type: integer
          description: Cryptographic Module
          example: 1
        keyStorage:
          type: integer
          description: key storage
          example: 105
        enforce:
          type: boolean
          description: Enforce or not
          example: true
        computerSecurity:
          type: integer
          description: computer security
          example: 70

    CreateServerRequest:
      type: object
      description: Request for create server certificate
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        keyAlgorithm:
          type: integer
          description: Key Algorithm which the CA will use
          example: 1
        keySize:
          type: integer
          description: size of the key in bits
          example: 2048
        keyUsage:
          type: integer
          description: Purposes for which the public key will be used for
          example: 40960
        keyUsageExtensionFlag:
          type: integer
          description: Additional Information about Key Usage
          example: 0
        extendedKeyUsage:
          type: integer
          description: Extended usages of the public key
          example: 56
        extendedKeyUsageExtensionFlag:
          type: integer
          description: Additional Information about Extended Key Usage
          example: 0
        allowExportPrivateKey:
          type: integer
          description: Whether or not to allow the export of private key
          example: 0
        subjectDN:
          type: string
          description: the entity associated with the public key
          example: CN=serverName.o=treeName
        subjectAltNames:
          type: array
          description: Alternative names secured by the certificate
          items:
            $ref: "#/components/schemas/SubjectAltDetails"
        signatureAlgorithm:
          type: integer
          description: Algorithm used to generate the digital signature for the certificate
          example: 8
        extensions:
          type: array
          description: extension array
          items:
            $ref: "#/components/schemas/Extension"
        validFrom:
          type: integer
          description: Start date of the certificate validity
          example: 1610935020
        validTo:
          type: integer
          description: End date of the certificate validity
          example: 1674007020
        validityPeriod:
          type: number
          description: Validity of the certificate
          format: float
          example: 2

    SuccessResponse:
      type: object
      description: Response of createCertificate
      properties:
        code:
          type: integer
          description: standard LDAP code
          example: 0
        message:
          type: string
          description: message
          example: success message

    SubjectAltDetails:
      type: object
      description: details of subjectAltName array
      properties:
        type:
          type: integer
          description: Type of  subject alternative name
          example: 2
        value:
          type: string
          description: Value of subject alternative name
          example: www.yourCompany.com

    Extension:
      type: object
      description: details of subjectAltName array
      properties:
        flags:
          type: integer
          description: Extension's flag
          example: 2
        value:
          type: string
          description: Extension's value
          example: www.yourCompany.com

    ImportServerRequest:
      type: object
      description: Request for import certificate method
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        fileContent:
          type: string
          description: Content of the certificate
          example: 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
        password:
          type: string
          description: Password of the file
          example: novell

    BackupResponse:
      type: object
      description: Response of backupCertificate endpoint
      properties:
        certificate:
          type: string
          description: certificate encoded in b64 format
          example: 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
        certificateSize:
          type: integer
          description: size of the certificate
          example: 3328

    BackupServerRequest:
      type: object
      description: Request for backupCertificate endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Name of the certificate
          example: cert
        password:
          type: string
          description: password of the certificate
          example: novell

    CertificateRequest:
      type: object
      description: Request for exportCertificate and validateCertificate endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Name of the certificate
          example: cert

    ExportResponse:
      type: object
      description: Response of exportCertificate endpoint
      properties:
        certificate:
          type: string
          description: Contents of the certificate to be exported
          example: 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

    Decode:
      type: object
      description: Request for decodeCSR endpoint
      properties:
        certSigningRequest:
          type: string
          description: CSR(Certificate Signing Request) for the certificate to be issued
          example: -----BEGIN CERTIFICATE REQUEST-----\nMIIC3TCCAcUCAQAwTzELMAkGA1UEBhMCaW4xDjAMBgNVBAgTBWRlbGhpMQ4wDAYD\nVQQHEwVkZWxoaTEPMA0GA1UEChMGbm92ZWxsMQ8wDQYDVQQDEwZTZXJ2ZXIwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJ\nP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD\n2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7\nxy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogP\nqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY\n5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMB\nAAGgSTBHBgkqhkiG9w0BCQ4xOjA4MDYGA1UdEQQvMC2CDWJlc3RmbGFyZS5jb22C\nDnVzZWZ1bHJlYWQuY29tggxjaGFuZGFuay5jb20wDQYJKoZIhvcNAQEFBQADggEB\nAH6UVmPbQtyompOu1+Fkx4KlezxeBImY6iAp7e9pyMfCV+ukD+GxL5Hgw47h9zGS\ndUOLaOxUEzh3NJ+mGaLruuZuzDc1yX7O5ubU2H/C1ZXN+B5ZOMakMN2gRM241Pru\nm8GOmE8TMv/7DEumrHBpHAdDZavTOKhGOF6QAKWG0lm+Z0Rf9VwdwZeFPRDfPOUe\nIB9OmKFg9Ih2WCIuASlTUAo6qdGXbd2eEaRPuqQ0NICqWdejrXjAQDzW2QIrfXW+\niAQSW9OMnCHgd0Koqxq6A2iOoRctjBPKwyRM3nMlraHKKKB8CgL/R6oAeDIdlh0X\nNTFFOUGREOzf7KWAw/aXWuc=\n-----END CERTIFICATE REQUEST-----

    DecodeResponse:
      type: object
      description: Response of decodeCSR endpoint
      properties:
        subjectDN:
          type: string
          description: Subject DN of the CSR
          example: CN=Server,O=novell
        signatureAlgorithm:
          type: string
          description: Signature algorithm of the CSR
          example: SHA1-RSA
        keyAlgorithm:
          type: string
          description: Key Algorithm of CSR
          example: RSA
        subjectAltNames:
          type: object
          description: Subject Alternative Names of CSR
          properties:
            dnsNames:
              type: array
              description: DNS names
              items:
                type: string
                example: www.yourcompany.com
            ipAddresses:
              type: array
              description: IP Address
              items:
                type: string
                example: 192.168.0.1
            emailAddresses:
              type: array
              description: Email Address
              items:
                type: string
                example: test@gmail.com
            uris:
              type: array
              description: URI
              items:
                type: string
                example: http://www.YourCompany.com

    GetCSRRequest:
      type: object
      description: Request for getCSR endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        keyAlgorithm:
          type: integer
          description: Key Algorithm which the CA will use
          example: 1
        keySize:
          type: integer
          description: size of the key in bits
          example: 2048
        subjectDN:
          type: string
          description: the entity associated with the public key
          example: CN=serverName.o=treeName
        signatureAlgorithm:
          type: integer
          description: Algorithm used to generate the digital signature for the certificate
          example: 8

    ReplaceRequest:
      type: object
      description: Request for replaceCertificate endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        fileContent:
          type: string
          description: Content of the certificate
          example: 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
        password:
          type: string
          description: Password of the file
          example: novell

    RevokeServerRequest:
      type: object
      description: Request for revokeCertificate
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        CertificateName:
          type: string
          description: Nick Name of the Certificate
          example: cert
        invalidityDate:
          type: integer
          description: Date starting from which the certificate is invalid
          example: 1597084200
        crlConfigurationDN:
          type: string
          description: CRL Configuration DN
          example: One - Configuration.CRL Container.Security
        reason:
          type: integer
          description: Reason for revocation
          example: 1
        comment:
          type: string
          description: Any additional comment for revocation
          example: Key Compromised

    Chain:
      type: object
      description: Response of getChain endpoint
      properties:
        certificates:
          type: array
          items:
            $ref: "#/components/schemas/ChainDetails"

    ChainDetails:
      type: object
      properties:
        certificateName:
          type: string
          description: Nick name of the certificate
          example: cert
        certificateChain:
          type: array
          items:
            $ref: "#/components/schemas/CertificateDetails"

    IssueRequest:
      type: object
      description: Request for issueCertificate endpoint
      properties:
        certSigningRequest:
          type: string
          description: CSR(Certificate Signing Request) for the certificate to be issued
          example: -----BEGIN CERTIFICATE REQUEST-----\nMIIC3TCCAcUCAQAwTzELMAkGA1UEBhMCaW4xDjAMBgNVBAgTBWRlbGhpMQ4wDAYD\nVQQHEwVkZWxoaTEPMA0GA1UEChMGbm92ZWxsMQ8wDQYDVQQDEwZTZXJ2ZXIwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJ\nP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD\n2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7\nxy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogP\nqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY\n5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMB\nAAGgSTBHBgkqhkiG9w0BCQ4xOjA4MDYGA1UdEQQvMC2CDWJlc3RmbGFyZS5jb22C\nDnVzZWZ1bHJlYWQuY29tggxjaGFuZGFuay5jb20wDQYJKoZIhvcNAQEFBQADggEB\nAH6UVmPbQtyompOu1+Fkx4KlezxeBImY6iAp7e9pyMfCV+ukD+GxL5Hgw47h9zGS\ndUOLaOxUEzh3NJ+mGaLruuZuzDc1yX7O5ubU2H/C1ZXN+B5ZOMakMN2gRM241Pru\nm8GOmE8TMv/7DEumrHBpHAdDZavTOKhGOF6QAKWG0lm+Z0Rf9VwdwZeFPRDfPOUe\nIB9OmKFg9Ih2WCIuASlTUAo6qdGXbd2eEaRPuqQ0NICqWdejrXjAQDzW2QIrfXW+\niAQSW9OMnCHgd0Koqxq6A2iOoRctjBPKwyRM3nMlraHKKKB8CgL/R6oAeDIdlh0X\nNTFFOUGREOzf7KWAw/aXWuc=\n-----END CERTIFICATE REQUEST-----
        keyUsage:
          type: integer
          description: Purposes for which the public key will be used for
          example: 40960
        keyUsageExtensionFlag:
          type: integer
          description: Additional Information about Key Usage
          example: 0
        extendedKeyUsage:
          type: integer
          description: Extended usages of the public key
          example: 56
        extendedKeyUsageExtensionFlag:
          type: integer
          description: Additional Information about Extended Key Usage
          example: 0
        subjectDN:
          type: string
          description: the entity associated with the public key
          example: CN=serverName.o=treeName
        subjectAltNames:
          type: array
          description: Alternative names secured by the certificate
          items:
            $ref: "#/components/schemas/SubjectAltDetails"
        signatureAlgorithm:
          type: integer
          description: Algorithm used to generate the digital signature for the certificate
          example: 8
        extensions:
          type: array
          description: extension array
          items:
            $ref: "#/components/schemas/Extension"
        validFrom:
          type: integer
          description: Start date of the certificate validity
          example: 1610935020
        validTo:
          type: integer
          description: End date of the certificate validity
          example: 1674007020
        validityPeriod:
          type: number
          description: Validity of the certificate
          format: float
          example: 2
        basicConstraintExtensionFlag:
          type: integer
          description: Additional Information about Basic Constraint Key Usage
          example: 0
        pathLength:
          type: integer
          description: Specifies how many subordinate levels of a certificate chain that the CA can certify.
          example: 0
        certificateType:
          type: integer
          description: Specifies whether the certificate is for CA or not
          example: 256

    IssueResponse:
      type: object
      description: Response of issueCertificate endpoint
      properties:
        certificate:
          type: string
          description: Certificate which is issued
          example: MIIG1jCCBb6gAwIBAgIUDDIYtIkOrreUH107alvUEH5nrM4wDQYJKoZIhvcNAQEFBQAwLzEaMBgGA1UECxMRT3JnYW5pemF0aW9uYWwgQ0ExETAPBgNVBAoTCFBVUkFOSUtBMB4XDTIxMDIxNTA3NDIzOFoXDTIzMDIxNTA3NDIzOFowLjEQMA4GA1UEChMHRURJUjkyMDEaMBgGA1UEAxMRU0xFUzEyU1AyLVZBTkktNDAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDbuBEe/9d5pbfbqC5Nh8wjQXbJP5VoyyRfreBgg2w6/orTbuTePIBAwYkphmm0BnS6otnE9mYsPIhL3YlAi90zPMZD2VEWsNUdCbKC1q45fSPKUfqt43YZjvVmLMchb2uqr79EDxBqZoMsUG0++jbwFLZ7xy8Y41/di7/iBMLwOwdSehly321z2IRDu1ULUEFxvNIIy5n6xb6l2shW94wsjogPqbYeD3qGz2vydeBinJkknSazNn7ywrAbVmI+oc8dALlfW7tdfJ4jKHpu1KgnuSVY5hwuTLmzGSmsvSLoeYYQgXsxHCntw/gjKmnHt9mfOrJexuIJngaEyRabu2xxAgMBAAGjggPpMIID5TAdBgNVHQ4EFgQUrEgGlRBZKduRE0uTXihZ3PeQJS8wHwYDVR0jBBgwFoAUk/G0M4xwHwPjpdvnSr5sq1/oJoQwCwYDVR0PBAQDAgWgMDoGA1UdEQQzMDGCD3d3dy5hbGFua2FyLmNvbYgeMQA2ADQALgA5ADkALgAxADYAMgAuADEAMwAxAAAAMIIBzAYLYIZIAYb4NwEJBAEEggG7MIIBtwQCAQABAf8THU5vdmVsbCBTZWN1cml0eSBBdHRyaWJ1dGUodG0pFkNodHRwOi8vZGV2ZWxvcGVyLm5vdmVsbC5jb20vcmVwb3NpdG9yeS9hdHRyaWJ1dGVzL2NlcnRhdHRyc192MTAuaHRtMIIBSKAaAQEAMAgwBgIBAQIBADAIMAYCAQECAQACAQChGgEBADAIMAYCAQECAQAwCDAGAgEBAgEAAgEAogYCAQABAf+jggEEoFgCAQICAgD/AgEAAw0AgAAAAAAAAAAAAAAAAwkAgAAAAAAAAAAwGDAQAgEAAgh//////////wEBAAIEBvDfSDAYMBACAQACCH//////////AQEAAgQG8N9IoVgCAQICAgD/AgEAAw0AQAAAAAAAAAAAAAAAAwkAQAAAAAAAAAAwGDAQAgEAAgh//////////wEBAAIEEf+wnTAYMBACAQACCH//////////AQEAAgQR/7Cdok4wTAIBAgIBAAICAP8DDQCAAAAAAAAAAAAAAAADCQCAAAAAAAAAADASMBACAQACCH//////////AQEAMBIwEAIBAAIIf/////////8BAQAwggGIBgNVHR8EggF/MIIBezAqoCigJoYkaHR0cDovLzEwLjcxLjEyOS44ODo4MDI4L2NybC9vbmUuY3JsMF6gXKBahlhsZGFwOi8vMTAuNzEuMTI5Ljg4OjM4OS9DTj1PbmUsQ049T25lJTIwLSUyMENvbmZpZ3VyYXRpb24sQ049Q1JMJTIwQ29udGFpbmVyLENOPVNlY3VyaXR5MCugKaAnhiVodHRwczovLzEwLjcxLjEyOS44ODo4MDMwL2NybC9vbmUuY3JsMF+gXaBbhllsZGFwczovLzEwLjcxLjEyOS44ODo2MzYvQ049T25lLENOPU9uZSUyMC0lMjBDb25maWd1cmF0aW9uLENOPUNSTCUyMENvbnRhaW5lcixDTj1TZWN1cml0eTBfoF2gW6RZMFcxDDAKBgNVBAMTA09uZTEcMBoGA1UEAxMTT25lIC0gQ29uZmlndXJhdGlvbjEWMBQGA1UEAxMNQ1JMIENvbnRhaW5lcjERMA8GA1UEAxMIU2VjdXJpdHkwDQYJKoZIhvcNAQEFBQADggEBACyh487oaE2Vbf0UrH8XAecqtN/qGcfVAxWbZ1Ou6GavNL450bY+nMTjU69FKX85kMOpaPZR62MV07kSLhl15x/9YZRHmx3d306c4gb/9mNRN6g+Tz8uOa72lbFmljmtm9kQhiKihYhw0taNQBDcnbGGhcHurfFSXqM550CwMml4h7GeToKupuW9iM/SYgbJ7rsPgZoX07Wh037xYKwlxzEpjDj9IJ+u762BsxlqRghGPvtEJkDPN4o02vWBmGT/ZBzJg/HCdecRIzpwVEn53ZXCoRnvotjjNGQv4bHnq7KP33+0JLhgPqI2xRfOi4D/QnbSnbCl1kvmBop+kOhtreM=

    BackupUserRequest:
      type: object
      description: Request for backupCertificate endpoint
      properties:
        userDN:
          type: string
          description: DN of the user  which owns the certificate
          example: user.novell
        certificateName:
          type: string
          description: Name of the certificate
          example: cert
        password:
          type: string
          description: password of the certificate
          example: novell

    ExportUserRequest:
      type: object
      description: Request for exportCertificate and validateCertificate endpoint
      properties:
        userDN:
          type: string
          description: DN of the user  which owns the certificate
          example: user.novell
        certificateName:
          type: string
          description: Name of the certificate
          example: cert

    GetUserRequest:
      type: object
      description: Request for getCertificate endpoint
      properties:
        userDN:
          type: string
          description: DN of the user  which owns the certificate
          example: user.novell

    ImportUserRequest:
      type: object
      description: Request for import certificate method
      properties:
        userDN:
          type: string
          description: DN of the user  which owns the certificate
          example: user.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        fileContentType:
          type: string
          description: Format/ Extension of the file. CERT (for .b64 and .cer), PKCS12 (for .pfx)
          example: PKCS12
        fileContent:
          type: string
          description: Content of the certificate
          example: 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
        password:
          type: string
          description: Password of the file. Required only when fileContentType is PKCS12
          example: novell
        flag:
          type: integer
          description: Required when fileContentType is PKCS12
          example: 0

    CreateUserRequest:
      type: object
      description: request for CreateUserCertificate endpoint
      properties:
        userDN:
          type: string
          description: DN of the user  which owns the certificate
          example: user.novell
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick Name of the certificate
          example: cert
        keyAlgorithm:
          type: integer
          description: Key Algorithm which the CA will use
          example: 1
        keySize:
          type: integer
          description: size of the key in bits
          example: 2048
        keyUsage:
          type: integer
          description: Purposes for which the public key will be used for
          example: 40960
        keyUsageExtensionFlag:
          type: integer
          description: Additional Information about Key Usage
          example: 0
        extendedKeyUsage:
          type: integer
          description: Extended usages of the public key
          example: 56
        extendedKeyUsageExtensionFlag:
          type: integer
          description: Additional Information about Extended Key Usage
          example: 0
        allowExportPrivateKey:
          type: integer
          description: Whether or not to allow the export of private key
          example: 0
        subjectDN:
          type: string
          description: the entity associated with the public key
          example: O=novell.CN=userName
        subjectAltNames:
          type: array
          description: Alternative names secured by the certificate
          items:
            $ref: "#/components/schemas/SubjectAltDetails"
        emailAddress:
          type: string
          description: A valid email address of the user
          example: test@gmail.com
        signatureAlgorithm:
          type: integer
          description: Algorithm used to generate the digital signature for the certificate
          example: 8
        extensions:
          type: array
          description: extension array
          items:
            $ref: "#/components/schemas/Extension"
        validFrom:
          type: integer
          description: Start date of the certificate validity
          example: 1610935020
        validTo:
          type: integer
          description: End date of the certificate validity
          example: 1674007020
        validityPeriod:
          type: number
          description: Validity of the certificate
          format: float
          example: 2

    GetTrustedResponse:
      type: object
      description: Response of getCertificates
      properties:
        certificates:
          type: array
          description: array of certificates
          items:
            allOf:
              - $ref: "#/components/schemas/TrustedResponse"
              - $ref: "#/components/schemas/CertificateDetails"

    TrustedResponse:
      type: object
      description: Response of getCertificates
      properties:
        trustedRootName:
          type: string
          description: Name of the trusted root
          example: trustedRoot1
        trustedRootContainer:
          type: string
          description: Context of the trusted root
          example: ed920/cn=Security/cn=tc1

    GetTrustedRequest:
      type: object
      description: Request for getCertificates
      properties:
        trustedRootContainerDN:
          type: string
          description: trusted container DN
          example: trc.novell

    ValidateTrustedRequest:
      type: object
      description: Request for validateCertificate
      properties:
        trustedRootDN:
          type: string
          description: DN of the trusted Root
          example: cn=tr1,cn=trc,o=novell

    BackupCARequest:
      type: object
      description: Request for BackupCertificate endpoint
      properties:
        certificate:
          type: string
          description: Certificate in base64 format
          example: MIIFUTCCBDmgAwIBAgIUbSJkYDZBI3psuuAgDeAWaGB+qTYwDQYJKoZIhvcNAQELBQAwZjEZMBcGA1UEChMQTklDSSBMaWNlbnNlZCBDQTFJMEcGA1UEAxNATklDSSBNYWNoaW5lLVVuaXF1ZSBDQSAxMUZGQUY4OS1EMDYxQjU0MERDOEZFRUEzMkI3NDM3MzJFN0FGREQ0NzAeFw0yMDAzMDIxMjExMjJaFw0zMDAzMDIxMjExMjJaMCwxGjAYBgNVBAsTEU9yZ2FuaXphdGlvbmFsIENBMQ4wDAYDVQQKEwVFRDkyMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKXCxPSLoQITqPZTnCZud76zjAArDImbMzR3exl6mlyaIW2JM611seqm3+lu/DuYKa7YxGZmW1tW3iSDQV7QW72aHsFZuREcnAWEmMp4hGM3fGvXwyduDWNms+GOP0A1563eTGFP3zJtO0O/nwaQPcD3bE+1M1tFpjUXkmeRWn9w8TZgajcXPeLobJY01zSr6ZAlZ2cs02+x9AHyzyLxsVr1tcS7czVfRpmSozpauX86A/hFszgPE1QFEup30sTd3nNbGofGBW3152xmPG1h6vuQAGMCuC16pG8n58/0FZxk03q2xfNBGg/VP0itsDkwP2Q9II82EMZntQ+P0PgdKeUCAwEAAaOCAi8wggIrMB0GA1UdDgQWBBRX8CXvhSzkVIRB1kLtedZMjPDJ6jAfBgNVHSMEGDAWgBTMzCaAZu9BFJtB84/lj+nXd3CoyDAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjCCAcwGC2CGSAGG+DcBCQQBBIIBuzCCAbcEAgEAAQH/Ex1Ob3ZlbGwgU2VjdXJpdHkgQXR0cmlidXRlKHRtKRZDaHR0cDovL2RldmVsb3Blci5ub3ZlbGwuY29tL3JlcG9zaXRvcnkvYXR0cmlidXRlcy9jZXJ0YXR0cnNfdjEwLmh0bTCCAUigGgEBADAIMAYCAQECAUYwCDAGAgEBAgEKAgFpoRoBAQAwCDAGAgEBAgEAMAgwBgIBAQIBAAIBAKIGAgEYAQH/o4IBBKBYAgECAgIA/wIBAAMNAIAAAAAAAAAAAAAAAAMJAIAAAAAAAAAAMBgwEAIBAAIIf/////////8BAQACBAbw30gwGDAQAgEAAgh//////////wEBAAIEBvDfSKFYAgECAgIA/wIBAAMNAEAAAAAAAAAAAAAAAAMJAEAAAAAAAAAAMBgwEAIBAAIIf/////////8BAQACBBH/r4kwGDAQAgEAAgh//////////wEBAAIEEf+viaJOMEwCAQICAgD/AgEAAw0AgP//////////////AwkAgP////////8wEjAQAgEAAgh//////////wEB/zASMBACAQACCH//////////AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQB6qLx9p8K84j1HJioP3BJzCSTlCg6/rwcO2ID+RbHu/GAtW1a7XGYB+BzCS8w8BrHeME8AMN5I5Upc7mUmtgknkOv8FXaHFmZyli3IyvkJsnf0xYyvj/CeliaEDMcGMPIy4CteZMHYYoyh3TvF4l2kGpd60b/NtSCFpTmKfONgcMsKslhY75qoKWVJXE2lsB3ZD7W2NteiwTjA4QlR6QqMIaCqJpIYxLPKipJil2EmQszQSgXJkz/ctU9i2DyitwCXnW/CwA4UIfFCsavZ64Fp+OCkP9x5CCANYnwN1r0O27LY/Y7I5KPKWVmk/ozObdQefjqVN+sjNCWNk3niPjqm
        password:
          type: string
          description: Password of the file
          example: novell

    CreateCARequest:
      type: object
      description: Request for createCertificateAuthority
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        certificateAuthorityName:
          type: string
          description: Nick Name of the certificate
          example: cert
        keyAlgorithm:
          type: integer
          description: Key Algorithm which the CA will use
          example: 1
        keySize:
          type: integer
          description: size of the key in bits
          example: 2048
        keyUsage:
          type: integer
          description: Purposes for which the public key will be used for
          example: 40960
        keyUsageExtensionFlag:
          type: integer
          description: Additional Information about Key Usage
          example: 0
        extendedKeyUsage:
          type: integer
          description: Extended usages of the public key
          example: 56
        extendedKeyUsageExtensionFlag:
          type: integer
          description: Additional Information about Extended Key Usage
          example: 0
        allowExportPrivateKey:
          type: integer
          description: Whether or not to allow the export of private key
          example: 0
        basicConstraintsExtensionFlag:
          type: integer
          description: Additional information about Basic Constraint
          example: 0
        subjectDN:
          type: string
          description: the entity associated with the public key
          example: CN=serverName.o=treeName
        subjectAltNames:
          type: array
          description: Alternative names secured by the certificate
          items:
            $ref: "#/components/schemas/SubjectAltDetails"
        signatureAlgorithm:
          type: integer
          description: Algorithm used to generate the digital signature for the certificate
          example: 8
        extensions:
          type: array
          description: extension array
          items:
            $ref: "#/components/schemas/Extension"
        validFrom:
          type: integer
          description: Start date of the certificate validity
          example: 1610935020
        validTo:
          type: integer
          description: End date of the certificate validity
          example: 1674007020
        validityPeriod:
          type: number
          description: Validity of the certificate
          format: float
          example: 2
        CRLs:
          type: array
          description: Array of CRL Objects
          items:
            $ref: "#/components/schemas/CRLDetails"

    CRLDetails:
      type: object
      description: Certificate Revokation List objects
      properties:
        CRLName:
          type: string
          description: Name of the CRL
          example: CRL_1
        CRLAlgorithm:
          type: integer
          description: Name of the algorithm. Supported Algorithms are
            0 for RSA
            1 for ECDSA
          example: 0
        CRLFileLocation:
          type: string
          description: CRL file location on CA Server
          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl
        CRLHTTPCRLDistributionPoints:
          type: array
          description: HTTP CRL Distribution points
          items:
            type: string
            example: http://10.71.128.211:8028/crl/CRL_1.crl
        CRLLDAPDistributionPoints:
          type: array
          description: LDAP CRL Distribution points
          items:
            type: string
            example: ldap://10.71.128.211:389/CN=CRL_2 - Configuration,CN=CRL Container,CN=Security
        CRLConfigurationName:
          type: string
          description: Configuration Name of the CRL
          example: One - Configuration

    CAConfiguration:
      type: object
      description: CA Congiguration setting
      properties:
        requireReadRights:
          type: boolean
          description: Require read rights to operate the CA
          example: true
        requireWriteRights:
          type: boolean
          description: Require Write rights to operate the CA
          example: true
        enableServerSelfProvisioning:
          type: boolean
          description: Enable Server Self Provisioning
          example: true
        forceHealthCheck:
          type: boolean
          description: Health Check - Force default certificate creation/update on CA change
          example: true
        enableUserSelfProvisioning:
          type: boolean
          description: Enable User Self Provisioning
          example: true
        allowUserToIssueEmergencyCRL:
          type: boolean
          description: Allow any authenticated user to issue an emergency CRL
          example: true
        enableSuiteBMode:
          type: boolean
          description: Enable SuiteB Mode
          example: true

    GetCRLs:
      type: object
      description: Response of getCRLs endpoint
      properties:
        CRLs:
          type: array
          description: Array of CRL objects
          items:
            $ref: "#/components/schemas/CRLs"

    CRLs:
      type: object
      description: contents of CRL array
      properties:
        CRLName:
          type: string
          description: Name of the CRL
          example: CRL_1
        CRLConfigurationName:
          type: string
          description: Name of the CRL Configuration
          example: Two - Configuration
        status:
          type: integer
          description: status of the crl
          example: 0
        CRLDN:
          type: string
          description: DN of the CRL
          example: /eDirAPI%2Fv1%2FUser%2Fcn=Security%2Fcn=CRL%20Container%2Fcn=One%20-%20Configuration%2Fcn=One
        certificateRevocationList:
          type: string
          description: List of the CRL
          example: MIIBBzCBjwIBATAKBggqhkjOPQQDAzAvMRowGAYDVQQLExFPcmdhbml6YXRpb25hbCBDQTERMA8GA1UEChMIUFVSQU5JS0EXDTIxMDIxMjEzMzgwMFoXDTIxMDIyNjEzMzgwMFqgLzAtMB8GA1UdIwQYMBaAFB588k4+tPqxnXI3zjIQ1BHHzH1rMAoGA1UdFAQDAgECMAoGCCqGSM49BAMDA2cAMGQCMFPSiH+nOeXpYSSPglM63jZ7ktZbe/f39JZzAfIuB8we1+k77KaZstnw2+bWb9LcYgIwP3si6jy7Am+dIXgNQ0Bup6g5c7v6ggNPwxf+2wz8Nrkbwfw+9BsK7KxwnRquFZ3nag==
        CRLAlgorithm:
          type: integer
          description: Name of the algorithm. Supported Algorithms are
            0 for RSA
            1 for ECDSA
          example: 0
        CRLFileLocation:
          type: string
          description: CRL file location on CA Server
          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl
        CRLDistributionPoints:
          type: array
          description: CRL Distribution points
          items:
            type: string
            example: ldap://10.71.128.211:389/CN=CRL_1,CN=CRL_1 - Configuration,CN=CRL Container,CN=Securit
        lastIssueAttempt:
          type: integer
          description: Time of the last issue attempt
          example: 1613137080
        lastIssueSuccess:
          type: integer
          description: Time of the last issue success
          example: 1613137080
        nextCRLIssue:
          type: integer
          description: Date of the next CRL Issue
          example: 1614346680
        repeatInterval:
          type: integer
          description: Date of the next CRL Issue
          example: 2
        repeatIntervalType:
          type: integer
          description: Interval type of CRL
          example: 4

    ImportCARequest:
      type: object
      description: Request for importCertificate endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server which owns the certificate
          example: serverName.novell
        certificateName:
          type: string
          description: Nick name of the certificate
          example: cert
        certificates:
          type: array
          description: Array of Certificate Objects
          items:
            $ref: "#/components/schemas/Certificate"

    Certificate:
      type: object
      description: content of certificate array
      properties:
        algorithm:
          type: integer
          description: Name of the algorithm. Supported Algorithms are
            0 for RSA
            1 for ECDSA
          example: 0
        fileContent:
          type: string
          description: Content of the import file
          example: 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
        password:
          type: string
          description: Password of the file
          example: novell

    IssueCRL:
      type: object
      description: Request for issueCRL endpoint
      properties:
        CRLConfigurationName:
          type: string
          description: Name of the CRL
          example: One - Configuration

    RevokeCARequest:
      type: object
      description: Request for revokeCertificate endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server  which owns the certificate
          example: serverName.novell
        invalidityDate:
          type: integer
          description: Date starting from which the certificate is invalid
          example: 1597084200
        crlConfigurationDN:
          type: string
          description: CRL Configuration DN
          example: One - Configuration.CRL Container.Security
        reason:
          type: integer
          description: Reason for revocation
          example: 1
        comment:
          type: string
          description: Any additional comment for revocation
          example: Key Compromised
        certificateType:
          type: string
          description: Type of the certificate
          example: self-signed RSA

    SASObject:
      type: object
      description: Request parameters for createSASServiceObject endpoint
      properties:
        serverName:
          type: string
          description: Name of the server
          example: server1
        serverContext:
          type: string
          description: context of the server
          example: o=novell

    UpdateCRLRequest:
      type: object
      description: Response of UpdateCRL endpoint
      properties:
        serverDN:
          type: string
          description: DN of the server which owns the certificate
          example: serverName.novell
        CRLs:
          type: array
          description: CRL array
          items:
            $ref: "#/components/schemas/UpdateCRLArray"

    UpdateCRLArray:
      type: object
      description: contents of CRL array
      properties:
        CRLFileLocation:
          type: string
          description: CRL file location on CA Server
          example: /var/opt/novell/eDirectory/data/nds-http/crl/CRL_1.crl
        CRLDeleteDistributionPoints:
          type: array
          description: LDAP CRL Distribution points
          items:
            type: string
            example: ldap://10.71.128.211:389/CN=CRL_11_EC - Configuration,CN=CRL Container,CN=Security
        CRLDistributionPoints:
          type: array
          description: LDAP CRL Distribution points
          items:
            type: string
            example: http://10.71.128.211:8028/crl1/CRL_1_EC.crl
        CRLConfigurationName:
          type: string
          description: Configuration Name of the CRL
          example: One - Configuration
        nextCRLIssue:
          type: integer
          description: Date of the next CRL Issue
          example: 1614346680
        repeatInterval:
          type: integer
          description: Date of the next CRL Issue
          example: 2
        repeatIntervalType:
          type: integer
          description: Interval type of CRL
          example: 4

    RevokeUserRequest:
      type: object
      description: Request for revokeCertificate
      properties:
        UserDN:
          type: string
          description: DN of the user which owns the certificate
          example: userName.novell
        CertificateName:
          type: string
          description: Nick Name of the Certificate
          example: cert
        invalidityDate:
          type: integer
          description: Date starting from which the certificate is invalid
          example: 1597084200
        crlConfigurationDN:
          type: string
          description: CRL Configuration DN
          example: One - Configuration.CRL Container.Security
        reason:
          type: integer
          description: Reason for revocation
          example: 1
        comment:
          type: string
          description: Any additional comment for revocation
          example: Key Compromised

    CreateCRLRequest:
      type: object
      description: request for createCRL
      properties:
        ServerDN:
          type: string
          description: DN of the server which owns the certificate
          example: serverName.novell
        CRLs:
          type: array
          description: CRL array
          items:
            $ref: "#/components/schemas/CRLDetails"

    GetCACertificate:
      type: object
      description: Response of getChain endpoint
      properties:
        certificates:
          type: array
          items:
            $ref: "#/components/schemas/CertificateDetails"

    ValidateCARequest:
      type: object
      description: Request for validateCA endpoint
      properties:
        certificateType:
          type: string
          description: Types of certificate are
            a) root
            b) self-signed RSA
            c) self-signed EC
          example: self-signed RSA

    GetNCPCertificateResponse:
      type: object
      description: JSON Representation of NCP certificate
      properties:
        SubjectNames:
          type: array
          description: array of NCP certificates
          items:
            $ref: "#/components/schemas/NCPCertificateDetails"

    NCPCertificateDetails:
      type: object
      properties:
        subjectNames:
          type: string
          description: NCP certificate
          example: "ncp://10.71.129.89:524"
        EBACAAddress:
          type: string
          description: EBA CA Address
          example: "164.99.90.180:524"
        certificateVersion:
          type: integer
          description: version of the certificate
          example: 3
        issuerName:
          type: string
          description: issuer of the certificate
          example: "/CN=EBACA"
        subjectName:
          type: string
          description: subjectName of the certificate
          example: "/UID=2C5A452E-A34E-AC47-8597-2C5A452EA34E"
        validityEnd:
          type: integer
          description: Ending date of validity
          example: 1933931093
        validityStart:
          type: integer
          description: Starting date of validity
          example: 1618571094
        serialNumber:
          type: string
          description: serial number of the certificate
          example: "473AA067C0F48C449626473AA067C0F4"
        signatureAlgorithm:
          type: string
          description: signature Algorithm of the certificate
          example: ecdsa-with-SHA384
        extensions:
          type: array
          description: Extension details
          items:
            $ref: "#/components/schemas/NCPExtensions"

    NCPExtensions:
      type: object
      properties:
        ExtensionName:
          type: string
          description: Name of the Extension
          example: X509v3 Basic Constraints
        ExtensionOID:
          type: string
          description: OID of the Extension
          example: "{2.5.29.19}"
        critical:
          type: boolean
          description: indicates if critical or not
          example: true
        pathLengthConstraint:
          type: integer
          description: path lenght of certificate
          example: -1
        certificateAuthority:
          type: integer
          description: specifies whether given certificate is CA certificate 
          example: 1

    RevokeNCPCertificate:
      type: object
      description: Request parameters for revokeNCPCertificate endpoint
      properties:
        serverIP:
          type: string
          description: IP Address along with the port for the server
          example: "164.99.90.180:524"
        serialNumber:
          type: string
          description: serial Number of the Certificate
          example: "F4AE0A91F69C98439C6CF4AE0A91F69C"

    ServerIP:
      type: object
      description: Request for getUAPCACertificate endpoint
      properties:
        serverIP:
          type: string
          description: IP Address along with the port for the server
          example: "164.99.90.180:524"

    GetUAPCAResponse:
      type: object
      description: Response of GetUAPCACertificate endpoint
      properties:
        EBACAAddress:
          type: string
          description: EBA CA Address
          example: "164.99.90.180:524"
        certificateVersion:
          type: integer
          description: version of the certificate
          example: 3
        issuerName:
          type: string
          description: issuer of the certificate
          example: "/CN=EBACA"
        subjectName:
          type: string
          description: subjectName of the certificate
          example: "/UID=2C5A452E-A34E-AC47-8597-2C5A452EA34E"
        validityEnd:
          type: integer
          description: Ending date of validity
          example: 1933931093
        validityStart:
          type: integer
          description: Starting date of validity
          example: 1618571094
        serialNumber:
          type: string
          description: serial number of the certificate
          example: "473AA067C0F48C449626473AA067C0F4"
        signatureAlgorithm:
          type: string
          description: signature Algorithm of the certificate
          example: ecdsa-with-SHA384

    GetUAPCSRResponse:
      type: object
      description: Response of GetUAPCSR endpoint
      properties:
        CSR:
          type: array
          description: List of Certificate Signing Request object
          items:
            type: string
            example: "02:96:01:B8:65:A3:3D:1F:78:84:E4:1A:6C:F0:93:76:38:8E:48:A4:67:54:0D:10:CA:6B:02:D4:25:BF:2A:9F|.CN=sles12sp2-bob-90180-s2.OU=blr.O=novell.T=SLES12SP2-BOB-90180.|164.99.90.180:1524"

    ApproveUAPCSRCertificate:
      type: object
      description: Request for approveUAPCSRCertificate endpoint
      properties:
        serverIP:
          type: string
          description: IP Address along with the port for the server
          example: "164.99.90.180:524"
        CSRs:
          type: array
          description: List of Certificate Signing Request object
          items:
            $ref: "#/components/schemas/CSRs"

    CSRs:
      type: object
      properties:
        serverDN:
          type: string
          description: DN of the server
          example: ".CN=sles12sp2-bob-90180-s4.OU=msr.O=novell.T=SLES12SP2-BOB-90180."

